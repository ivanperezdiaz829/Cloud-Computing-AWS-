AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Fargate + API Gateway REST API with API Key"

Parameters:
  ImageName:
    Type: String
    Description: ECR Image Name
    Default: items-app:latest

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: At least 2 Subnets

  DBType:
    Type: String
    Default: postgres
    AllowedValues:
      - postgres

  DBHost:
    Type: String
    Default: ""
    Description: DB Host (only DBType=postgres)

  DBName:
    Type: String
    Default: ""
    Description: DB Name (only DBType=postgres)

  DBUser:
    Type: String
    Default: ""
    Description: DB User (only DBType=postgres)

  DBPass:
    Type: String
    NoEcho: true
    Default: ""
    Description: DB PASS (only DBType=postgres)

# ============================================================================
# NETWORKING RESOURCES
# ============================================================================
Resources:
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # ============================================================================
  # LOAD BALANCER RESOURCES
  # ============================================================================
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: items-nlb
      Type: network
      Scheme: internal
      Subnets: !Ref SubnetIds

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: items-tg
      Port: 8080
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NLB
      Port: 8080
      Protocol: TCP

  # ============================================================================
  # ECS RESOURCES
  # ============================================================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: items-cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: items-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      TaskRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      ContainerDefinitions:
        - Name: items-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/items
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: items
              awslogs-create-group: "true"
          Environment:
            - Name: DB_TYPE
              Value: !Ref DBType
            - Name: DB_HOST
              Value: !Ref DBHost
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USER
              Value: !Ref DBUser
            - Name: DB_PASS
              Value: !Ref DBPass

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: items-service
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: items-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  # ============================================================================
  # API GATEWAY RESOURCES
  # ============================================================================
  VPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: items-vpc-link
      TargetArns:
        - !Ref NLB

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: items-api
      Description: API para gesti√≥n de items

  ItemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: items

  ItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref ItemsResource
      PathPart: "{id}"

  PostItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NLB.DNSName}:8080/items"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink

  GetItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NLB.DNSName}:8080/items"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink

  GetItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NLB.DNSName}:8080/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  PutItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: PUT
        Uri: !Sub "http://${NLB.DNSName}:8080/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  DeleteItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: DELETE
        Uri: !Sub "http://${NLB.DNSName}:8080/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  OptionsItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  OptionsItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostItemsMethod
      - GetItemsMethod
      - GetItemMethod
      - PutItemMethod
      - DeleteItemMethod
      - OptionsItemsMethod
      - OptionsItemMethod
    Properties:
      RestApiId: !Ref RestAPI

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestAPI
      DeploymentId: !Ref APIDeployment
      StageName: prod

  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: items-api-key
      Enabled: true

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: APIStage
    Properties:
      UsagePlanName: items-usage-plan
      ApiStages:
        - ApiId: !Ref RestAPI
          Stage: !Ref APIStage

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

# ============================================================================
# OUTPUTS
# ============================================================================
Outputs:
  APIEndpoint:
    Description: API Gateway URL
    Value: !Sub "https://${RestAPI}.execute-api.eu-east-1.amazonaws.com/prod"

  APIKeyId:
    Description: API Key ID
    Value: !Ref APIKey
